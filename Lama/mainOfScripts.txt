# if __name__ == "__main__":
#     # Example usage
#     description = """
# Meeting Transcript: University Course Registration System Discussion

# Team Lead (Alex): Okay, team, today we're discussing the University Course Registration System we're building. It's meant to streamline how students register for courses at the university, so let's map out the key classes and their interactions.

# Developer (Sam): We'll need classes for Students, Courses, Faculty, and Registration.

# Team Lead (Alex): Exactly. Students will have attributes like student ID, name, and enrolled courses. They'll be able to register for courses, view their schedule, and check prerequisites.

# Analyst (Jordan): Courses should have details like course code, title, description, and capacity. Faculty members will manage courses, set prerequisites, and view student enrollments.

# Designer (Priya): We'll need a Registration class to handle the registration process, tracking which students are enrolled in which courses, managing waitlists, and handling course capacity.

# Team Lead (Alex): Great points. We should also consider how we'll handle academic records, prerequisites, and potential conflicts in course scheduling.
# """
#     pid = 1  # Example process ID
#     ClassDiagramDriver(description, pid)



if __name__ == "__main__":
    # Example usage
    description =  """
    Sarah (Project Manager): Good morning, everyone. Let’s begin our sprint planning and review. The main focus of this sprint is finalizing the task management module and improving the user notification system. We also need to address the feedback we got from our internal QA last week.Ahmed (Backend Developer): On my end, the task management API is mostly done. The endpoints for creating, editing, and deleting tasks are complete. I’m still working on the endpoint to assign tasks to multiple users and include deadline tracking. I had to refactor some code to make it more modular and reusable, especially for error handling.Lina (Frontend Developer): The task list UI is finished, and task filtering by date, priority, and status is implemented. However, I’m facing an issue with rendering assigned users' avatars dynamically when there are more than five users on one task. I’ll need to optimize the layout for that. Also, I’m working on converting all task actions to modals for better UX consistency.Omar (QA Engineer): Just a heads up — during regression testing, I found that the bulk delete action is bypassing the confirmation prompt sometimes, especially when network latency is high. It needs a safeguard. Also, assigning a task to a deactivated user doesn’t trigger any validation.Noor (UX Designer): Regarding the confirmation issue, I suggest we standardize all confirmation prompts with our new modal component and have them await confirmation explicitly. That should help reduce inconsistencies across different modules.Sarah: Good catch. Let’s prioritize fixing the bulk delete issue. Also, for deactivated users, can we prevent their names from even showing in the assignment dropdown?Ahmed: Yes, I’ll add a filter to exclude deactivated accounts from the assignment API response. Should be a quick fix.Lina: That works. I’ll also disable the frontend dropdown entry as a backup.Omar: Another thing — some of the toast notifications are disappearing too quickly before users can read them, especially on slower machines.Noor: I’ve had the same complaint from the UX review. We can increase the default timeout for toasts and make sure they pause when hovered.Sarah: Good. Let’s also document those toast behavior changes. We don’t want this to get lost in future sprints.Lina: I also want to mention the user notification system. I’ve integrated the new backend endpoints, but we need a decision on whether to allow push notifications for due tasks or only show them inside the dashboard.Ahmed: The backend supports both now — we can send push notifications using Firebase and store in-app messages in the user’s notification center.Sarah: Let’s go with both. But we need user preferences so they can toggle them.Noor: I’ll design a settings page where users can enable or disable push notifications, daily summaries, and activity alerts. I’ll share the prototype this afternoon.Sarah: Sounds good. What about performance concerns for users with thousands of notifications?Ahmed: I already added pagination and lazy loading on the notifications endpoint. But we can also auto-archive older notifications after 30 days unless they’re marked as important.Omar: Just make sure there’s a way for users to retrieve archived notifications if needed.Sarah: Great point. Let’s add an "Archived" tab in the notification center for now.Lina: I’ll take care of that in the UI.Sarah: Any updates on localization?Ahmed: We’ve externalized all strings for the task and notification modules. They're ready to be translated. I’ve also added language headers to API responses so we can serve localized error messages.Noor: I’ll sync with the translation vendor today and share progress by Friday.Sarah: One last thing. The client asked if we could support dark mode by next release.Lina: I’ve already created the base styles and variables for it. I just need Noor to finalize the color palette.Noor: It’s almost done. I’ll send it today.Sarah: Amazing. Let’s aim to finish all blockers by Wednesday so we can start the new sprint clean. Please update Jira and tag any dependencies. Thanks, everyone!All: Thanks, Sarah.
    """
    pid = 1  # Example process ID
    DbDiagramDriver(description, pid)


    if __name__ == "__main__":
    # Example usage
    description = """"
    Functional requirements : 
    Users should be able to: Create an account ,View available slots, Book appointments.
Event organizers can: Create and manage event listings.
Notifications : Users will receive email or SMS notifications for Confirmations and Reminders (cancellation and rescheduling).
UX : The system should allow users to Browse events ,Search for specific events and Book tickets for events.
Sprint goals: Develop a functional appointment booking system ,Implement notification mechanisms for confirmations and reminders.
Non-Funtional requirements : 
Performance : System reliability , Fast performance and Security for handling personal data.
Backend/Technical : No technical updates or refactoring discussed during the meeting.
QA : testing will focus on ensuring the system meets non-functional requirements (reliability, speed, and security).
    """
    pid = 999  # Example process ID
    ClassDiagramDriver(description, pid)